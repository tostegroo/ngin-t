if(overlap.overlap.x && overlap.overlap.y)
{
    //x axis
    b1_new_velocity.x = b1.velocity.x//b1_length * Math.cos(b1_angle - overlap.angle);
    b1_final_velocity.x = ((b1.mass - b2.mass) * b1_new_velocity.x + (2 * b2.mass) * b2_new_velocity.x) / (b1.mass + b2.mass);

    b2_new_velocity.x = b2.velocity.x//b2_length * Math.cos(b2_angle - overlap.angle);
    b2_final_velocity.x = ((2 * b1.mass) * b1_new_velocity.x + (b2.mass - b1.mass) * b2_new_velocity.x) / (b1.mass + b2.mass);

    //y axis
    b1_new_velocity.y = b1.velocity.y//b1_length * Math.sin(b1_angle - overlap.angle);
    b1_final_velocity.y = ((b1.mass - b2.mass) * b1_new_velocity.y + (2 * b2.mass) * b2_new_velocity.y) / (b1.mass + b2.mass);

    b2_new_velocity.y = b2.velocity.y//b2_length * Math.sin(b2_angle - overlap.angle);
    b2_final_velocity.y = ((2 * b1.mass) * b1_new_velocity.y + (b2.mass - b1.mass) * b2_new_velocity.y) / (b1.mass + b2.mass);

    b1.velocity.x = b1_final_velocity.x//Math.cos(overlap.angle) * b1_final_velocity.x + Math.cos(overlap.angle + pi2) * b1_final_velocity.y;
    b2.velocity.x = b2_final_velocity.x//Math.cos(overlap.angle) * b2_final_velocity.x + Math.cos(overlap.angle + pi2) * b2_final_velocity.y;

    b1.velocity.y = b1_final_velocity.y//Math.sin(overlap.angle) * b1_final_velocity.x + Math.sin(overlap.angle + pi2) * b1_final_velocity.y;
    b2.velocity.y = b2_final_velocity.y//Math.sin(overlap.angle) * b2_final_velocity.x + Math.sin(overlap.angle + pi2) * b2_final_velocity.y;
}

if(overlap.value.y > overlap.value.x)
{
    b1._impulseDirection.y = overlap.direction.x;
    //b1.velocity.x = Math.cos(overlap.angle) * b1_final_velocity.x + Math.cos(overlap.angle + pi2) * b1_final_velocity.y;
    //b1.velocity.x *= overlap.area.y;

    b2._impulseDirection.y = -overlap.direction.x;
    //b2.velocity.x = Math.cos(overlap.angle) * b2_final_velocity.x + Math.cos(overlap.angle + pi2) * b2_final_velocity.y;
    //b2.velocity.x *= overlap.area.y;

    b1._position.x += overlap.value.x * overlap.direction.x;

    using = 'x';
}

_calculateTileCollision(b)
    {
        let minTileX = Math.floor(b.shape.left / SETTINGS.TILE_SIZE);
        let maxTileX = Math.ceil(b.shape.right / SETTINGS.TILE_SIZE);

        let minTileY = Math.floor(b.shape.top / SETTINGS.TILE_SIZE);
        let maxTileY = Math.ceil(b.shape.bottom / SETTINGS.TILE_SIZE);

        let restitution = {x: 0, y: 0};
        let x, y;
        for (x = minTileX; x < maxTileX; x++)
        {
            for (y = minTileY; y < maxTileY; y++)
            {
                let tile = this.tileList[x+'-'+y];
                if(tile)
                {
                    let angleBetween = b.shape.angleBetween(tile.shape);
                    let intersectionData = b.shape.intersection(tile.shape);
                    if(intersectionData)
                    {
                        ScreenConsole.log(
                            "angle: "+b.velocity.angle,
                            "cos: "+Math.cos(b.velocity.angle),
                            "sin: "+Math.sin(b.velocity.angle)
                        );

                        restitution.x = b._bounciness.x[intersectionData.direction.x] + tile._bounciness.x[-intersectionData.direction.x];
                        restitution.y = b._bounciness.y[intersectionData.direction.y] + tile._bounciness.y[-intersectionData.direction.y];

                        if(intersectionData.height > intersectionData.width)
                        {
                            b._impulseDirection.y = intersectionData.direction.x;
                            b.shape.x += intersectionData.width * intersectionData.direction.x;
                            b.velocity.x = -b.velocity.x * restitution.x;
                        }

                        if(intersectionData.width > intersectionData.height)
                        {
                            b._impulseDirection.x = intersectionData.direction.y;
                            b.shape.y += intersectionData.height * intersectionData.direction.y;
                            b.velocity.y = -b.velocity.y * restitution.y;
                        }
                    }
                    this.tileList[x+'-'+y].sprite.color = "#333";
                }
            }
        }
    }